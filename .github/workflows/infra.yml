name: Terraform plan / apply / destroy

on:
    workflow_dispatch:
        inputs:
            environment:
                type: choice
                description: Environment
                options:
                    - dev
                    - stage
                    - prod
                    - all
                default: test
            action:
                description: Choose plan/apply or destroy
                required: true
                default: "plan/apply"
                type: choice
                options:
                    - plan/apply
                    - destroy
jobs:
    terraform:
        name: Terraform plan/apply/destroy
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./terraform
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.5.6

            - name: Export AWS credentials
              run: |
                echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
                echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
                echo "AWS_DEFAULT_REGION=eu-central-1" >> $GITHUB_ENV

            - name: Create S3 bucket and dynamodb table if chose plan/apply
              if: ${{ github.event.inputs.action == 'plan/apply' }}
              run: |
               aws s3api create-bucket --bucket kibirs-tfstate-bucket --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1 || true
               aws s3api put-bucket-versioning --bucket kibirs-tfstate-bucket --versioning-configuration Status=Enabled
               aws s3api put-bucket-encryption --bucket kibirs-tfstate-bucket --server-side-encryption-configuration '{ "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
               aws dynamodb create-table --table-name kibirs-tfstate-lock --attribute-definitions AttributeName=LockID,AttributeType=S --key-schema AttributeName=LockID,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 || true

            - name: Terraform init
              run: terraform init

            - name: Terraform Validate
              run: terraform validate

            - name: Perform chosen action
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              run: |
                if [ "${{ github.event.inputs.action }}" == "plan/apply" ]; then
                  terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars;
                  terraform apply -auto-approve -var-file=${{ github.event.inputs.environment }}.tfvars;
                elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
                  terraform destroy -auto-approve -var-file=${{ github.event.inputs.environment }}.tfvars;
                else
                  echo "Invalid action: ${{ github.event.inputs.action }}";
                  exit 1;
                fi
                terraform output instance_ip

            - name: Delete S3 bucket and DynamoDB table (if destroy)
              if: ${{ github.event.inputs.action == 'destroy' }}
              run: |
                # Trinam viską iš kibiro pt1
                aws s3api list-object-versions --bucket kibirs-tfstate-bucket --query "Versions[].{Key:Key,VersionId:VersionId}" --output json > delete-versions.json
                if [ -s delete-versions.json ] && [ "$(cat delete-versions.json)" != "null" ]; then
                    for version in $(cat delete-versions.json | jq -c '.[]'); do
                      key=$(echo $version | jq -r '.Key')
                      versionId=$(echo $version | jq -r '.VersionId')
                      aws s3api delete-object --bucket kibirs-tfstate-bucket --key "$key" --version-id "$versionId"
                    done
                fi

                # Trinam viską iš kibiro pt2
                aws s3api list-object-versions --bucket kibirs-tfstate-bucket --query "DeleteMarkers[].{Key:Key,VersionId:VersionId}" --output json > delete-markers.json
                if [ -s delete-markers.json ] && [ "$(cat delete-markers.json)" != "null" ]; then
                    for marker in $(cat delete-markers.json | jq -c '.[]'); do
                      key=$(echo $marker | jq -r '.Key')
                      versionId=$(echo $marker | jq -r '.VersionId')
                      aws s3api delete-object --bucket kibirs-tfstate-bucket --key "$key" --version-id "$versionId"
                    done
                fi

                # Tikrinam ar kibiras tuščias
                remaining_objects=$(aws s3api list-objects-v2 --bucket kibirs-tfstate-bucket --query "Contents[].Key" --output json)
                if [ "$remaining_objects" != "[]" ] && [ "$remaining_objects" != "null" ]; then
                  exit 1
                fi

                # Trinam kibirą
                aws s3api delete-bucket --bucket kibirs-tfstate-bucket --region eu-central-1 || true

                # Trinam lentelę
                aws dynamodb delete-table --table-name kibirs-tfstate-lock || true
                
            - name: Save instance IP to file
              if: ${{ github.event.inputs.action == 'plan/apply' }}
              run: |
                echo "Current runner directory: $(pwd)"
                # Use GITHUB_WORKSPACE to reference the root of the repository and save the file in the terraform directory
                echo "Saving instance IP to $GITHUB_WORKSPACE/terraform/instance_ip.txt"
                instance_ip=$(terraform output instance_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
                
                echo "Instance IP: $instance_ip"
                
                # Define the absolute path
                file_path="${GITHUB_WORKSPACE}/terraform/instance_ip.txt"
                    
                # Create the terraform directory if it doesn't exist
                mkdir -p "$(dirname "$file_path")"
                    
                # Write the instance IP to the file
                echo "$instance_ip" > "$file_path"
                echo "Instance IP saved to: $file_path"
            - name: Check if instance IP file exists
              run: |
                if [ -f "${GITHUB_WORKSPACE}/terraform/instance_ip.txt" ]; then
                  echo "File exists."
                else
                  echo "File does not exist."
                  exit 1
                fi
                
            - name: Upload instance IP as artifact
              uses: actions/upload-artifact@v4
              with:
                name: instance-ip
                path: ./terraform/instance_ip.txt
                overwrite: true
                include-hidden-files: true
    IP:
        name: Another Job to Use update IP  
        runs-on: ubuntu-latest
        needs: terraform
        defaults:
            run:
                working-directory: ./terraform
        steps:
          - name: Checkout Code
            uses: actions/checkout@v4
    
          - name: Download instance IP artifact
            uses: actions/download-artifact@v4
            with:
              name: instance-ip
    
          - name: List files in current directory
            run: |
              # List the contents of the current directory to see where the file is
              echo "Contents of current directory:"
              ls -l
        
          - name: Extract the downloaded artifact if it's a ZIP file
            run: |
              # If the artifact is a ZIP file, extract it
              if [ -f instance-ip.zip ]; then
                unzip instance-ip.zip -d ./artifact-folder
                echo "Artifact extracted to ./artifact-folder"
              fi
        
          - name: Move instance IP to /terraform directory
            run: |
              # Check if the file exists after extraction and move it
              if [ -f ./artifact-folder/instance_ip.txt ]; then
                mv ./artifact-folder/instance_ip.txt ./terraform/instance_ip.txt
                echo "Moved instance_ip.txt to ./terraform"
              else
                echo "Error: instance_ip.txt not found in the extracted folder."
                exit 1
              fi
    
          - name: Use instance IP in another job
            run: |
              cat ./terraform/instance_ip.txt
              # Your logic to use the file data
    
          - name: Set up SSH key
            run: |
              mkdir -p ~/.ssh
              echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              # Ensure SSH connections to GitHub don't prompt for confirmation
              ssh-keyscan github.com >> ~/.ssh/known_hosts
    
          - name: Configure Git
            run: |
              git config --global user.name "Dzeriskk5"
              git config --global user.email "dzeriskk@gmail.com"
    
          - name: Commit and push changes
            run: |
              git add ./terraform/instance_ip.txt
              git commit -m "Update instance IP"
              git push git@github.com:Dzeriskk5/Galutinis.git HEAD:main
